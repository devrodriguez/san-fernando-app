{"version":3,"sources":["webpack:///./src/app/orders/orders.module.ts","webpack:///./src/app/orders/orders.page.html","webpack:///./src/app/orders/orders.page.scss","webpack:///./src/app/orders/orders.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEF;AAE3C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,uDAAU;KACtB;CACF,CAAC;AAWF;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAT5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,uDAAU,CAAC;SAC3B,CAAC;OACW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB7B,wWAAwW,4CAA4C,sCAAsC,8CAA8C,uD;;;;;;;;;;;ACAxe,+DAA+D,uI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACc;AAEvB;AACU;AAOnD;IAKE,oBAAoB,YAA0B,EAAU,MAAc,EAAU,iBAAoC;QAApH,iBAKC;QALmB,iBAAY,GAAZ,YAAY,CAAc;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;QAHpH,WAAM,GAAiB,IAAI,KAAK,EAAS,CAAC;QAIxC,IAAI,CAAC,SAAS,EAAE;aACf,IAAI,CAAC;YACJ,KAAI,CAAC,SAAS,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,6BAAQ,GAAR;IACA,CAAC;IAED,8BAAS,GAAT;QAAA,iBASC;QARC,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE;aACjC,IAAI,CAAC,UAAC,MAAoB;YACzB,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC;aACD,KAAK,CAAC,aAAG;YACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+BAAU,GAAV,UAAW,KAAY;QACrB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACzD,CAAC;IAEK,8BAAS,GAAf;;;;;;wBACE,SAAI;wBAAW,qBAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;gCACjD,OAAO,EAAE,UAAU;6BACpB,CAAC;;wBAFF,GAAK,OAAO,GAAG,SAEb,CAAC;wBAEI,qBAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;4BAAnC,sBAAO,SAA4B,EAAC;;;;KACrC;IAEK,+BAAU,GAAhB;;;;4BACS,qBAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;4BAAnC,sBAAO,SAA4B,EAAC;;;;KACrC;IAxCU,UAAU;QALtB,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,4FAAiC;;SAElC,CAAC;yCAMkC,6EAAY,EAAkB,sDAAM,EAA6B,gEAAiB;OALzG,UAAU,CA0CtB;IAAD,iBAAC;CAAA;AA1CsB","file":"orders-orders-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { OrdersPage } from './orders.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: OrdersPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [OrdersPage]\n})\nexport class OrdersPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>Ordenes</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list>\\n    <ion-item *ngFor=\\\"let order of orders\\\" (click)=\\\"showDetail(order)\\\">\\n      <ion-label>{{order.sale_date | date:'dd/MM/yyyy h:mm a'}}</ion-label>\\n      <p slot=\\\"end\\\">{{order.price_order | currency:'COP':'$':'1.0'}}</p>\\n    </ion-item>\\n  </ion-list>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL29yZGVycy9vcmRlcnMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { OrderService } from 'src/services/order/order.service';\nimport { Order } from 'src/models/order.model';\nimport { Router } from '@angular/router';\nimport { LoadingController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-orders',\n  templateUrl: './orders.page.html',\n  styleUrls: ['./orders.page.scss'],\n})\nexport class OrdersPage implements OnInit {\n\n  orders: Array<Order> = new Array<Order>();\n  loading: any;\n\n  constructor(private orderService: OrderService, private router: Router, private loadingController: LoadingController) {\n    this.loadingOn()\n    .then(() => {\n      this.getOrders();\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  getOrders() {\n    this.orderService.getLocalOrders()\n    .then((orders: Array<Order>) => {\n      this.orders = orders;\n      this.loadingOff();\n    })\n    .catch(err => {\n      console.log(err);\n    });\n  }\n\n  showDetail(order: Order) {\n    this.router.navigate(['order', { orderId: order.id }]);\n  }\n\n  async loadingOn() {\n    this.loading = await this.loadingController.create({\n      message: 'Cargando'\n    });\n\n    return await this.loading.present();\n  }\n\n  async loadingOff() {\n    return await this.loading.dismiss();\n  }\n\n}\n"],"sourceRoot":""}